generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  id           Int        @id @default(autoincrement())
  product_name String     @unique
  product_slug String     @unique
  SKU          Int
  brand        String
  image        String
  description  String
  price        Float
  discount     Discounts? @relation(fields: [discount_id], references: [id])
  discount_id  Int
  type         String
  featured     Boolean    @default(false)
  stock        Int
  categories   Category[]
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now()) @updatedAt

  snowboards Snowboards[]
  boots      Boots[]
  bindings   Bindings[]
  helmets    Helmets[]
  goggles    Goggles[]
  gloves     Gloves[]
  orders     OrderItems[]
}

model Category {
  id            Int      @id @default(autoincrement())
  category_name String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  products Products[]
}

model Snowboards {
  id            Int      @id @default(autoincrement())
  product       Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id    Int
  sizes         String
  ability_level String   @default("")
  terrain       String   @default("")
  rocker_type   String   @default("")
  shape         String   @default("")
  flex_rating   String   @default("")
  core          String   @default("")
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
}

model Boots {
  id            Int      @id @default(autoincrement())
  product       Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id    Int
  sizes         String   @default("S M L XL")
  ability_level String   @default("")
  flex_rating   String   @default("")
  lacing_system String   @default("")
  binding_style String   @default("")
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
}

model Bindings {
  id            Int      @id @default(autoincrement())
  product       Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id    Int
  sizes         String   @default("S M L XL")
  ability_level String   @default("")
  flex_rating   String   @default("")
  binding_style String   @default("")
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
}

model Helmets {
  id                 Int      @id @default(autoincrement())
  product            Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id         Int
  sizes              String   @default("S M L XL")
  material           String   @default("")
  style              String   @default("")
  venting            String   @default("")
  audio              String   @default("")
  removable_ear_pads String   @default("")
  adjustable_fit     String   @default("")
  weight             String   @default("")
  created_at         DateTime @default(now())
  updated_at         DateTime @default(now()) @updatedAt
}

model Goggles {
  id                Int      @id @default(autoincrement())
  product           Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id        Int
  sizes             String   @default("S M L XL")
  frame_size        String   @default("")
  lens_type         String   @default("")
  quick_lens        String   @default("")
  helmet_compatible String   @default("")
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt
}

model Gloves {
  id         Int      @id @default(autoincrement())
  product    Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int
  sizes      String   @default("S M L XL")
  warmth     String   @default("")
  material   String   @default("")
  cuff_style String   @default("")
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model Discounts {
  id                  Int        @id @default(autoincrement())
  name                String
  description         String
  discount_percentage Float
  isGlobal            Boolean    @default(false)
  created_at          DateTime   @default(now())
  updated_at          DateTime   @default(now()) @updatedAt
  products            Products[]

  @@unique([name])
}

model OrderDetails {
  id              Int      @id @default(autoincrement())
  user_id         Int      @default(0)
  first_name      String   @default("")
  last_name       String   @default("")
  delivery_adress Json     @default("{}")
  phone           String   @default("")
  email           String   @default("")
  total           Float
  status          String   @default("pending")
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  order_items     OrderItems[]
  payment_details PaymentDetails[]
}

model OrderItems {
  id           Int           @id @default(autoincrement())
  orderDetails OrderDetails? @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id     Int
  products     Products      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id   Int
  quantity     Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now()) @updatedAt
}

model PaymentDetails {
  id             Int           @id @default(autoincrement())
  orderDetails   OrderDetails? @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id       Int
  payment_method String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
